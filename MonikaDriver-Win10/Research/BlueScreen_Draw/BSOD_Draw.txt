// This file is for learning how kernel draw BSOD Screen only, calling stack and disassembly code exported from WinDbg. Do NOT use this file for any other purpose.
// Hooking/Extracting Pointer/Data from Kernel Area with undocumented method is not allowed in published project.

// Calling Stack
HyperVideo!HvdDdiSystemDisplayWrite -> void DxgkddiSystemDisplayWrite([in] PVOID MiniportDeviceContext, [in] PVOID Source, [in] UINT SourceWidth, [in] UINT SourceHeight, [in] UINT SourceStride, [in] UINT PositionX, [in] UINT PositionY)
dxgkrnl!DpiSystemDisplayWrite+0xd8
nt!GxpWriteFrameBufferPixels+0x1416e2
nt!BgpGxDrawRectangle+0x59
nt!BgpClearScreen+0xec
nt!BgpFwDisplayBugCheckScreen+0xc4
nt!KiDisplayBlueScreen+0x245

// Important Function Pointers, Might Be Changed when Windows Kernel Updated... Below is WinServer2022
mov     rax,qword ptr [dxgkrnl!DpGlobals+0x390]
RAX -> HvdDdiSystemDisplayWrite

mov     rcx,qword ptr [dxgkrnl!DpGlobals+0x398]
mov     rcx,qword ptr [rcx+30h]
RCX -> DisplayContext

############ Old Research Log ############
nt!BugCheck2

nt!KeEnterKernelDebugger+0x94c (KiDisplayBlueScreen)
nt!HviGetHardwareFeatures+0x64b8 (fffff801`7c838568) (BgpFwDisplayBugCheckScreen)
nt!HviGetHardwareFeatures+0x4fa4 

call    nt!HalFreeCommonBuffer+0x950 BgpClearScreen

/*
result = ((__int64 (__fastcall *)(unsigned int *, _QWORD, void *, __int64))BgpGxInitializeRectangle)(
             &v17,
             BitsPerPixel,
             &unk_140D0B840,
             0x2000LL);
*/

nt!HalFreeCommonBuffer+0x9e0 (GxpWriteFrameBufferPixels) ------------- *(RCX + 24) == P_FRAMEBUFFER_Template
call    nt!_chkstk+0x110
nt!WmiTraceMessageVa+0x83109 call    nt!_chkstk+0x110
fffff804`818dcf02 ff1530620e00    call    qword ptr [fffff804`819c3138]
fffff804`822e1695 e882020000       call    fffff804`822e191c
fffff804`822e1983 ff15ef470000    call    qword ptr [fffff804`822e6178]
fffff804`8087c022 e845350000      call    fffff804`8087f56c
fffff804`8087f5f7 ff1563210100    call    qword ptr [fffff804`80891760]
nt!HvlInvokeHypercall